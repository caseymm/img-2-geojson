{"version":3,"sources":["../../img-to-geojson/src/app-components/dropzone.js","../../img-to-geojson/src/app-pages/home.js","../../img-to-geojson/src/app-pages/about.js","../../img-to-geojson/src/App.js","../../img-to-geojson/src/index.js"],"names":["currentImage","Dropzone","open","getRootProps","getInputProps","acceptedFiles","useDropzone","files","map","file","src","URL","createObjectURL","path","forEach","f","console","log","className","length","mapboxgl","accessToken","process","Map","Component","constructor","props","super","this","state","lng","lat","zoom","mapOpacity","imageOpacity","imageWidth","mapContainer","React","createRef","handleChange","bind","componentDidMount","container","current","style","center","scale","ScaleControl","maxWidth","unit","addControl","setUnit","Draw","MapboxDraw","displayControlsDefault","controls","polygon","line_string","trash","modes","Object","assign","draw_polygon","FreehandMode","styles","MapboxGeocoder","marker","event","setState","target","name","value","document","querySelector","opacity","error","width","render","lockMap","boxZoom","disable","scrollZoom","doubleClickZoom","touchZoomRotate","unlockMap","enable","setBlankStyle","setStyle","resetStyle","finZoomIn","getZoom","setZoom","finZoomOut","downloadGeoJSON","data","getAll","features","convertedData","encodeURIComponent","JSON","stringify","getElementById","setAttribute","click","alert","ref","onClick","type","min","max","step","onChange","id","href","Home","Details","About","App","PureComponent","exact","element","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.8da03c53.chunk.js","sourcesContent":["import React from \"react\";\nimport { useDropzone } from \"react-dropzone\";\n\nlet currentImage;\n\nfunction Dropzone({ open }) {\n  const { getRootProps, getInputProps, acceptedFiles } =\n    useDropzone({});\n  \n  const files = acceptedFiles.map((file) => (\n    <img key={file.path} src={URL.createObjectURL(file)} />\n  ));\n\n  acceptedFiles.forEach(f => {\n    if(!currentImage){\n      currentImage = f.path;\n      console.log(f)\n    } else if(currentImage === f.path) {\n      // do nothing\n    } else {\n      currentImage = f.path;\n      console.log(f)\n    }\n  })\n\n  return (\n    <div className=\"allInputContainer\">\n      {acceptedFiles.length > 0 &&\n        <div className=\"droppedImage\">{files}</div>\n      }\n      {acceptedFiles.length === 0 && \n        <div className=\"container\">\n          <div {...getRootProps({ className: \"dropzone\" })}>\n            <input {...getInputProps()} />\n            <p>Drag and drop a file here or click to select a file</p>\n          </div>\n        </div>\n      }\n    </div>\n  );\n}\n\nexport default Dropzone;","import React from 'react';\nimport { Component } from 'react';\n// import { Link } from \"react-router-dom\";\nimport mapboxgl from '!mapbox-gl'; // eslint-disable-line import/no-webpack-loader-syntax\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport * as turf from '@turf/turf';\nimport Dropzone from '../app-components/dropzone'\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport FreehandMode from 'mapbox-gl-draw-freehand-mode'\nimport { Exception } from 'sass';\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\n\nclass Map extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lng: -98.78320225360663,\n      lat: 40.45646421496375, \n      zoom: 3.5,\n      mapOpacity: .5,\n      imageOpacity: .5,\n      imageWidth: 800\n    };\n    this.mapContainer = React.createRef();\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { lng, lat, zoom } = this.state;\n    this.map = new mapboxgl.Map({\n      container: this.mapContainer.current,\n      style: 'mapbox://styles/caseymmiler/cl45xkrmg000714loppfn16v6',\n      center: [lng, lat],\n      zoom: zoom\n    });\n\n    const scale = new mapboxgl.ScaleControl({\n      maxWidth: 150,\n      unit: 'imperial'\n    });\n    this.map.addControl(scale);\n    scale.setUnit('imperial');\n\n    this.Draw = new MapboxDraw({\n      displayControlsDefault: false,\n      // Select which mapbox-gl-draw control buttons to add to the map.\n      controls: {\n        polygon: true,\n        line_string: true,\n        trash: true\n      },\n      modes: Object.assign(MapboxDraw.modes, {\n        draw_polygon: FreehandMode\n      }),\n      styles: [\n        {\n          'id': 'gl-draw-polygon-fill-inactive',\n          'type': 'fill',\n          'filter': ['all', ['==', 'active', 'false'],\n              ['==', '$type', 'Polygon'],\n              ['!=', 'mode', 'static']\n          ],\n          'paint': {\n              'fill-color': '#3bb2d0',\n              'fill-outline-color': '#3bb2d0',\n              'fill-opacity': 0.2\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-fill-active',\n          'type': 'fill',\n          'filter': ['all', ['==', 'active', 'true'],\n              ['==', '$type', 'Polygon']\n          ],\n          'paint': {\n              'fill-color': '#fbb03b',\n              'fill-outline-color': '#fbb03b',\n              'fill-opacity': 0.2\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-midpoint',\n          'type': 'circle',\n          'filter': ['all', ['==', '$type', 'Point'],\n              ['==', 'meta', 'midpoint']\n          ],\n          'paint': {\n              'circle-radius': 3,\n              'circle-color': '#fbb03b'\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-stroke-inactive',\n          'type': 'line',\n          'filter': ['all', ['==', 'active', 'false'],\n              ['==', '$type', 'Polygon'],\n              ['!=', 'mode', 'static']\n          ],\n          'layout': {\n              'line-cap': 'round',\n              'line-join': 'round'\n          },\n          'paint': {\n              'line-color': '#3bb2d0',\n              'line-width': 4\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-stroke-active',\n          'type': 'line',\n          'filter': ['all', ['==', 'active', 'true'],\n              ['==', '$type', 'Polygon']\n          ],\n          'layout': {\n              'line-cap': 'round',\n              'line-join': 'round'\n          },\n          'paint': {\n              'line-color': '#fbb03b',\n              'line-dasharray': [0.2, 2],\n              'line-width': 4\n          }\n      },\n      {\n          'id': 'gl-draw-line-inactive',\n          'type': 'line',\n          'filter': ['all', ['==', 'active', 'false'],\n              ['==', '$type', 'LineString'],\n              ['!=', 'mode', 'static']\n          ],\n          'layout': {\n              'line-cap': 'round',\n              'line-join': 'round'\n          },\n          'paint': {\n              'line-color': '#3bb2d0',\n              'line-width': 4\n          }\n      },\n      {\n          'id': 'gl-draw-line-active',\n          'type': 'line',\n          'filter': ['all', ['==', '$type', 'LineString'],\n              ['==', 'active', 'true']\n          ],\n          'layout': {\n              'line-cap': 'round',\n              'line-join': 'round'\n          },\n          'paint': {\n              'line-color': '#fbb03b',\n              'line-dasharray': [0.2, 2],\n              'line-width': 4\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-and-line-vertex-stroke-inactive',\n          'type': 'circle',\n          'filter': ['all', ['==', 'meta', 'vertex'],\n              ['==', '$type', 'Point'],\n              ['!=', 'mode', 'static']\n          ],\n          'paint': {\n              'circle-radius': 5,\n              'circle-color': '#fff'\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-and-line-vertex-inactive',\n          'type': 'circle',\n          'filter': ['all', ['==', 'meta', 'vertex'],\n              ['==', '$type', 'Point'],\n              ['!=', 'mode', 'static']\n          ],\n          'paint': {\n              'circle-radius': 3,\n              'circle-color': '#fbb03b'\n          }\n      },\n      {\n          'id': 'gl-draw-point-point-stroke-inactive',\n          'type': 'circle',\n          'filter': ['all', ['==', 'active', 'false'],\n              ['==', '$type', 'Point'],\n              ['==', 'meta', 'feature'],\n              ['!=', 'mode', 'static']\n          ],\n          'paint': {\n              'circle-radius': 5,\n              'circle-opacity': 1,\n              'circle-color': '#fff'\n          }\n      },\n      {\n          'id': 'gl-draw-point-inactive',\n          'type': 'circle',\n          'filter': ['all', ['==', 'active', 'false'],\n              ['==', '$type', 'Point'],\n              ['==', 'meta', 'feature'],\n              ['!=', 'mode', 'static']\n          ],\n          'paint': {\n              'circle-radius': 3,\n              'circle-color': '#3bb2d0'\n          }\n      },\n      {\n          'id': 'gl-draw-point-stroke-active',\n          'type': 'circle',\n          'filter': ['all', ['==', '$type', 'Point'],\n              ['==', 'active', 'true'],\n              ['!=', 'meta', 'midpoint']\n          ],\n          'paint': {\n              'circle-radius': 7,\n              'circle-color': '#fff'\n          }\n      },\n      {\n          'id': 'gl-draw-point-active',\n          'type': 'circle',\n          'filter': ['all', ['==', '$type', 'Point'],\n              ['!=', 'meta', 'midpoint'],\n              ['==', 'active', 'true']\n          ],\n          'paint': {\n              'circle-radius': 5,\n              'circle-color': '#fbb03b'\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-fill-static',\n          'type': 'fill',\n          'filter': ['all', ['==', 'mode', 'static'],\n              ['==', '$type', 'Polygon']\n          ],\n          'paint': {\n              'fill-color': '#404040',\n              'fill-outline-color': '#404040',\n              'fill-opacity': 0.2\n          }\n      },\n      {\n          'id': 'gl-draw-polygon-stroke-static',\n          'type': 'line',\n          'filter': ['all', ['==', 'mode', 'static'],\n              ['==', '$type', 'Polygon']\n          ],\n          'layout': {\n              'line-cap': 'round',\n              'line-join': 'round'\n          },\n          'paint': {\n              'line-color': '#404040',\n              'line-width': 4\n          }\n      },\n      {\n          'id': 'gl-draw-line-static',\n          'type': 'line',\n          'filter': ['all', ['==', 'mode', 'static'],\n              ['==', '$type', 'LineString']\n          ],\n          'layout': {\n              'line-cap': 'round',\n              'line-join': 'round'\n          },\n          'paint': {\n              'line-color': '#404040',\n              'line-width': 4\n          }\n      }\n      ]\n    });\n    \n    this.map.addControl(\n      new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl: mapboxgl,\n        marker: false\n      })\n    );\n    this.map.addControl(this.Draw);\n  }\n\n  handleChange(event) {\n    // console.log(event.target.className)\n    this.setState({\n      [event.target.name]: event.target.value\n    });\n    if(event.target.name === 'mapOpacity'){\n      let mapOpacity = document.querySelector(\".mapboxgl-canvas\");\n      mapOpacity.style.opacity = event.target.value;\n    }\n    if(event.target.name === 'imageOpacity'){\n      try {\n        let image = document.querySelector(\".droppedImage\");\n        image.style.opacity = event.target.value;\n      } catch (error) {\n        console.error('no image yet');\n      }\n    }\n    if(event.target.name === 'imageWidth'){\n      try {\n        let image = document.querySelector(\".droppedImage\");\n        image.style.width = `${event.target.value}px`;\n      } catch (error) {\n        console.error('no image yet');\n      }\n    }\n  }\n\n  render() {\n    const lockMap = () => {\n      console.log('click lock')\n      this.map.boxZoom.disable();\n      this.map.scrollZoom.disable();\n      // this.map.dragPan.disable();\n      // this.map.dragRotate.disable();\n      // this.map.keyboard.disable();\n      this.map.doubleClickZoom.disable();\n      this.map.touchZoomRotate.disable();\n    }\n\n    const unlockMap = () => {\n      console.log('click unlock')\n      this.map.boxZoom.enable();\n      this.map.scrollZoom.enable();\n      // this.map.dragPan.enable();\n      // this.map.dragRotate.enable();\n      // this.map.keyboard.enable();\n      this.map.doubleClickZoom.enable();\n      this.map.touchZoomRotate.enable();\n    }\n\n    const setBlankStyle = () => {\n      this.map.setStyle('mapbox://styles/caseymmiler/cl466jhd2000515o4sqpaul44');\n      let blankStyle = document.querySelector(\".mapboxgl-canvas\");\n      blankStyle.style.opacity = \"1\";\n    }\n    const resetStyle = () => {\n      this.map.setStyle('mapbox://styles/caseymmiler/cl45xkrmg000714loppfn16v6');\n    }\n\n    const finZoomIn = () => {\n      const zoom = this.map.getZoom();\n      this.map.setZoom(zoom+.01);\n    }\n\n    const finZoomOut = () => {\n      const zoom = this.map.getZoom();\n      this.map.setZoom(zoom-.01);\n    }\n\n    const downloadGeoJSON = () => {\n      // console.log(this.Draw.getAll());\n      const data = this.Draw.getAll();\n      if (data.features.length > 0) {\n          // Stringify the GeoJson\n          var convertedData = 'text/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(data));\n\n          // Create export\n          document.getElementById('export').setAttribute('href', 'data:' + convertedData);\n          document.getElementById('export').setAttribute('download','data.geojson');\n          document.getElementById('export').click();\n      } else {\n          alert(\"Nothing to export\");\n      }\n    }\n\n    return (\n      <div>\n        <Dropzone />\n        <div ref={this.mapContainer} className=\"map-container\" />\n        <div className=\"buttons\">\n          <p>Drawing Tools</p>\n          <p className=\"header special\">Zoom Tools</p>\n          <p className=\"small\">Scroll to zoom</p>\n          <div className=\"button-container\">\n            <button className=\"lock\" onClick={() => lockMap()}></button>\n            <button className=\"unlock\" onClick={() => unlockMap()}></button>\n          </div>\n          <p className=\"small\">Finite zoom</p>\n          <div className=\"button-container\">\n            <button onClick={() => finZoomOut()}><span>➖</span></button>\n            <button onClick={() => finZoomIn()}><span>➕</span></button>\n          </div>\n          <p className=\"header\">Style controls</p>\n          <button onClick={() => setBlankStyle()}>set blank style</button>\n          <button onClick={() => resetStyle()}>reset style</button>\n          <p className=\"header\">Opacity controls</p>\n          <label>\n            <div className=\"slider-label\">\n              Map Opacity:\n              <div className=\"range-label\">{this.state.mapOpacity}</div>\n            </div>\n            <input type=\"range\" className=\"range\" name=\"mapOpacity\" min=\"0\" max=\"1\" step=\".01\" value={this.state.mapOpacity} onChange={this.handleChange}></input>\n          </label>\n          <label>\n            <div className=\"slider-label\">\n              Image Opacity:\n              <div className=\"range-label\">{this.state.imageOpacity}</div>\n            </div>\n            <input type=\"range\" className=\"range\" name=\"imageOpacity\" min=\"0\" max=\"1\" step=\".01\" value={this.state.imageOpacity} onChange={this.handleChange}></input>\n          </label>\n          <p className=\"header\">Image controls</p>\n          <label>\n            <div className=\"slider-label\">\n              Image width:\n              <div className=\"range-label\">{this.state.imageWidth}</div>\n            </div>\n            <input type=\"range\" className=\"range\" name=\"imageWidth\" min=\"100\" max=\"2000\" step=\"1\" value={this.state.imageWidth} onChange={this.handleChange}></input>\n          </label>\n          <p className=\"header\"></p>\n          <button className=\"geojson\" onClick={() => downloadGeoJSON()}>Download GeoJSON</button>\n          <a id=\"export\">file</a>\n        </div>\n        <span className=\"attribute\">by <a href=\"https://twitter.com/caseymmiller\">@caseymmiller</a></span>\n      </div>\n    );\n  }\n}\n\nconst Home = (props) => {\n   return(\n    <Map />\n   )\n}\n \nexport default Home;","import React from 'react';\n\nclass Details extends React.Component {\n  render() {\n    return (\n      <div className=\"about\">\n        <h1>About this project</h1>\n      </div>\n    );\n  }\n}\n\nconst About = () => {\n   return(\n    <Details />\n   )\n}\n \nexport default About;","import React from 'react';\nimport {\n  HashRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport './index.scss';\nimport 'dotenv/config'\n\nimport Home from './app-pages/home';\nimport About from './app-pages/about';\n\nexport default class App extends React.PureComponent {\n  render() {\n    return (\n      <HashRouter>\n        <Routes>\n          <Route exact path='/' element={<Home />} />\n          <Route exact path='/about' element={<About />} />\n        </Routes>\n      </HashRouter>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './index.scss';\nimport 'dotenv/config'\nimport App from './App';\n \nReactDOM.render(\n<React.StrictMode>\n  <App />\n</React.StrictMode>,\ndocument.getElementById('root')\n);"],"sourceRoot":""}